#pragma once

enum EOUTMODE
{
	OUTMODE_BAYER_BGGR = 1, // Bayer
	OUTMODE_BAYER_RGGB,
	OUTMODE_BAYER_GBRG,
	OUTMODE_BAYER_GRBG,
	OUTMODE_BAYER_BLACKWHITE,
	OUTMODE_YUV422_YCbYCr = 1, // YUV422
	OUTMODE_YUV422_YCrYCb = 2,
	OUTMODE_YUV422_CbYCrY = 3,
	OUTMODE_YUV422_CrYCbY = 4,
	OUTMODE_RGB_BGR = 1, // RGB
	OUTMODE_RGB_RGB = 2,
	OUTMODE_BAYER_BNGR = 1, // RGB-IR Uniform pattern
	OUTMODE_BAYER_RGNB,
	OUTMODE_BAYER_NBRG,
	OUTMODE_BAYER_GRBN,
	OUTMODE_BAYER_BGGN = 1,	// RGB-IR Pattern 2
	OUTMODE_BAYER_RGGN,
	OUTMODE_BAYER_GBNG,
	OUTMODE_BAYER_GRNG,
	OUTMODE_BAYER_NGGR,
	OUTMODE_BAYER_NGGB,
	OUTMODE_BAYER_GNRG,
	OUTMODE_BAYER_GNBG,
};

enum EYCONVERTMETHOD
{
	Y_CONVERTMETHOD_ITU_R_601,
	Y_CONVERTMETHOD_ITU_R_709
};
#define ITU_R_709_Y		0x80
#define OrgOutMode(x)	((EOUTMODE)(x & ~ITU_R_709_Y))

enum EDATAFORMAT
{
	DATAFORMAT_YUV,
	DATAFORMAT_BAYER_8BIT,
	DATAFORMAT_BAYER_10BIT,
	DATAFORMAT_BAYER_PARALLEL_10BIT,
	DATAFORMAT_BAYER_12BIT,
	DATAFORMAT_BAYER_PARALLEL_12BIT,
	DATAFORMAT_BAYER_16BIT,
	DATAFORMAT_BAYER_16BIT_BE,
	DATAFORMAT_BAYER_12BIT_PWL_HDR,
	DATAFORMAT_BAYER_16BIT_PWL_HDR,
	DATAFORMAT_BAYER_16BIT_PWL_DECOMP,
	DATAFORMAT_BAYER_24BIT,
	DATAFORMAT_BAYER_PARALLEL_10BIT_BE,
	DATAFORMAT_BAYER_PARALLEL_12BIT_BE,
	DATAFORMAT_RGB = 100,
	DATAFORMAT_INT = 200
};

enum ESENSORTYPE
{
	SENSORTYPE_RGGB = 0,
	SENSORTYPE_RCCC,
	SENSORTYPE_RCCB,
	SENSORTYPE_CCCC,
	SENSORTYPE_RBCC,
	SENSORTYPE_OTHER,
	SENSORTYPE_RGBIR2,
	MAX_COUNT_SENSORTYPE
};

#define SENSORTYPE_RGGB_VNG		8
#define SENSORTYPE_RGGB_G_ONLY	9

enum EDEMOSAICMETHOD
{
	DEMOSAICMETHOD_NONE = 0,
	DEMOSAICMETHOD_GRADIENT,
	DEMOSAICMETHOD_BL33, // Bilinear3x3
	DEMOSAICMETHOD_OPENCV_BL,
	DEMOSAICMETHOD_OPENCV_VNG,
	DEMOSAICMETHOD_OPENCV_EA,
	DEMOSAICMETHOD_VNG,  // Variable Number of Gradient
	DEMOSAICMETHOD_GR_ONLY,
	DEMOSAICMETHOD_GB_ONLY,
	DEMOSAICMETHOD_GBTF, // Gradient based Threshold Free
	DEMOSAICMETHOD_BLLC, // Bilinear Laplacian Corrected
	DEMOSAICMETHOD_RESIDUAL, // Residual Interpolation
	DEMOSAICMETHOD_BAYER_Y, // Y = (R + Gr + Gb + B) / 4
	DEMOSAICMETHOD_AHD, // Adaptive Homogeneity-Directed
	DEMOSAICMETHOD_GRADIENT_RESIDUAL = 101, // G(Gradient) + R/B/IR(RI)
	DEMOSAICMETHOD_GBTF_RESIDUAL, // G(GBTF) + R/B/IR(RI)
	DEMOSAICMETHOD_RESIDUAL_RESIDUAL, // G(RI) + R/B/IR(RI)
	DEMOSAICMETHOD_BL33_RESIDUAL, // G(BL33) + R/B/IR(RI)
	DEMOSAICMETHOD_IR_ONLY,
	DEMOSAICMETHOD_GRADIENT_G_ONLY, // G(Gradient)
	DEMOSAICMETHOD_GBTF_G_ONLY, // G(GBTF)
	DEMOSAICMETHOD_RESIDUAL_G_ONLY, // G(RI)
	DEMOSAICMETHOD_BL33_G_ONLY, // G(BL33)
	DEMOSAICMETHOD_GRADIENT_IR_ONLY, // IR(Gradient)
	DEMOSAICMETHOD_GBTF_IR_ONLY, // IR(GBTF)
	DEMOSAICMETHOD_RESIDUAL_IR_ONLY, // IR(RI)
	DEMOSAICMETHOD_BL33_IR_ONLY, // IR(BL33)
	MAX_COUNT_DEMOSAICMETHOD
};

enum EImageIndex
{
	/* ONSEMI or OVT Sensor */
	EImageIndex_Bright = 0,
	EImageIndex_Dark,
	EMax_ImageIndex_Count,
	/* Sony Sensor */
	EImageIndex_Highlight_SP1L = 0,
	EImageIndex_Highlight_SP2L,
	EImageIndex_Dark_SP1L,
	EImageIndex_Dark_SP2H,
	EImageIndex_Dark_SP2L,
	EImageIndex_Saturated_SP1H,
	EImageIndex_Saturated_SP1L,
	EImageIndex_Saturated_SP2H,
	EImageIndex_Saturated_SP2L,
	EMax_Sony_ImageIndex_Count
};

enum AlgorithmTestItem
{
	BLEMISH_BLACKSPOT = 0,
	BLEMISH_LCB,
	BLEMISH_FDF,
	BLEMISH_RU_YMEAN,
	RESOLUTION_EIAJ,
	RESOLUTION_SFR2FREQ,
	RESOLUTION_FREQ2SFR,
	OPTICAL_CENTER_CENTROID, // bkkim :: modified due to the duplicated definition
	OPTICAL_CENTER_BRIGHTEST,
	OPTICAL_CENTER_POLYFIT,        // bkkim :: modified due to the duplicated definition
	OPTICAL_CENTER_FIDUCIAL_MARK,  // bkkim :: modified due to the duplicated definition
	SNR_FPN,
	SNR_BW,
	SNR_NORM,
	SNR_DARK_CURRENT,
	SNR_VNE,
	SNR_DARK_NOISE,
	ETC_COLOR_REPRODUCTION,
	ETC_IR_FILTER,
	ETC_COLOR_INTENSITY,
	ETC_FOV,
	ETC_FLARE,
	ETC_VIEW_MODE,
	ETC_SATURATION,
	ETC_STRAY_LIGHT,
	DARK_BRIGHT,
	DARK_DARK,
	DARK_HOT,
	DARK_LINE_NOISE,
	DARK_LOW_LIGHT_DARK,
	DARK_ALL_DEFECT_ONSEMI,
	DARK_ALL_DEFECT_OMS,
	DARK_ALL_DEFECT_OV,
	DARK_ALL_DEFECT_SONY,
	DARK_ALL_DEFECT_RIVIAN,
	SHADING_COLOR_SHADING,
	SHADING_COLOR_SHADING_COMMON,
	SHADING_RELATIVE_ILLUMINATION,
	SHADING_RELATIVE_ILLUMINATION_COMMON,
	SHADING_RELATIVE_ILLUMINATION_X,
	SHADING_RELATIVE_UNIFORMITY,
	SHADING_COLOR_UNIFORMITY,
	SHADING_SHADING_UNIFORMITY,
	SHADING_COLOR_SENSITIVITY,
	SHADING_LENS_SHADING,
	ALGORITHM_TESTITEM_MAX
};

enum EROIType
{
	ROIType_RECT,
	ROIType_POINT,
	ROIType_FIELD,
	ROIType_SPOINT,
	ROIType_Common,
	ROIType_CPOINT = ROIType_POINT
};

// Image type
enum EImageFormat
{
	IMAGE_TYPE_BAYER,
	IMAGE_TYPE_RGB,
	IMAGE_TYPE_Y,
	IMAGE_TYPE_G, /* Tesla Trinity */
	/*IMAGE_TYPE_YUV,*/
	MAX_COUNT_IMAGE_TYPE
};

enum EFlareTarget
{
	FlareTarget_Dot,
	FlareTarget_Window
};

#define CIRCLE_FLAG_VERSION_MAJOR		1
#define CIRCLE_FLAG_VERSION_MINOR		0
enum CIRCLE_FLAG
{
	CIRCLE_ENABLE,
	CIRCLE_POS_OFFSET_X,
	CIRCLE_POS_OFFSET_Y,
	CIRCLE_RADIUS_RATIO_X,
	CIRCLE_RADIUS_RATIO_Y,
	CIRCLE_THRESHOLD_RATIO,
	CIRCLE_ROI_RANGE,
	CIRCLE_USED_FIXED_CIRCLE,

	CIRCLE_FLAG_MAX_COUNT
};

#define CIRCLE_COMMON_FLAG_VERSION_MAJOR		1
#define CIRCLE_COMMON_FLAG_VERSION_MINOR		0
enum CIRCLE_COMMON_FLAG
{
	CIRCLE_COMMON_ENABLE,
	CIRCLE_COMMON_RADIUS_RATIO_X,
	CIRCLE_COMMON_RADIUS_RATIO_Y,
	CIRCLE_COMMON_USED_FIXED_CIRCLE,
	CIRCLE_DETECT_POS_OFFSET_X,
	CIRCLE_DETECT_POS_OFFSET_Y,
	CIRCLE_DETECT_THRESHOLD_RATIO,
	CIRCLE_DETECT_ROI_RANGE,
	CIRCLE_MULTI_ZONE_SIZE_RATIO_A,
	CIRCLE_MULTI_ZONE_SIZE_RATIO_B,
	CIRCLE_MULTI_ZONE_SIZE_RATIO_C,
	CIRCLE_MULTI_THRESHOLD_A,
	CIRCLE_MULTI_THRESHOLD_B,
	CIRCLE_MULTI_THRESHOLD_C,

	CIRCLE_COMMON_FLAG_MAX_COUNT
};

enum ECircleEnable
{
	CIRCLE_DISABLE,
	CIRCLE_SINGLE_ENABLE,
	CIRCLE_MULTI_ENABLE
};

enum ETypicalValueType
{
	TypicalValue_Mean,
	TypicalValue_Median
};

enum EFiducialMarkShape
{
	FiducialMarkShape_BlackCircle,
	FiducialMarkShape_WhiteCircle,
	FiducialMarkShape_CrossPoint,
	FiducialMarkShape_WhiteCircleInBlack,
	FiducialMarkShape_BlackPatch,
	FiducialMarkShape_WhitePatch,
	FiducialMarkShape_Vertex
};

enum ESaturationMethod
{
	SaturationMethod_Y,
	SaturationMethod_Bayer,
	SaturationMethod_RGB,
	SaturationMethod_Bayer_G,
	SaturationMethod_RGB_G
};

enum EEdgeDirection
{
	EDGEDIR_VERTICAL,
	EDGEDIR_HORIZONTAL
};

enum EPosition
{
	EPOS_CENTER,
	EPOS_LEFT,
	EPOS_TOP,
	EPOS_RIGHT,
	EPOS_BOTTOM
};

enum EPatchShape
{
	PatchShape_Square,
	PatchShape_Clamp,
	PatchShape_PacMan,
	PatchShape_Fan,
	PatchShape_Polygon,
	PatchShape_TwinFan
};

enum EMEANTYPE
{
	MEAN_TYPE_ALL,
	MEAN_TYPE_ROW,
	MEAN_TYPE_COLUMN,
	MEAN_TYPE_ALL_BAYER,
	MEAN_TYPE_ROW_BAYER,
	MEAN_TYPE_COLUMN_BAYER,
	MAX_COUNT_MEAN_TYPE
};

enum VAR_TYPE
{
	VAR_TYPE_BYTE = 0,
	VAR_TYPE_SHORT,
	VAR_TYPE_USHORT,
	VAR_TYPE_INT,
	VAR_TYPE_FLOAT,
	VAR_TYPE_DOUBLE
};

#define MAKE_VERION(T,M,m)	((unsigned int)((T << 16) | (M << 8) | m))
#define GET_TYPE(V)			((unsigned int)((V >> 16) & 0xFFFF))
#define GET_MAJOR(V)		((unsigned int)((V >> 8) & 0xFF))
#define GET_MINOR(V)		((unsigned int)(V & 0xFF))

enum SPEC_TYPE
{
	/* Defect Pixel */
	SPEC_TYPE_DEFECT_PIXEL,
	SPEC_TYPE_HOT_DEFECT_PIXEL,
	SPEC_TYPE_VERY_DEFECT_PIXEL,
	SPEC_TYPE_LINE_NOISE,
	SPEC_TYPE_COLUMN_FPN,
	SPEC_TYPE_LOW_LIGHT_DARK_TEST,
	SPEC_TYPE_ALL_DEFECT_ONSEMI,
	SPEC_TYPE_ALL_DEFECT_ONSEMI_RCCB = SPEC_TYPE_ALL_DEFECT_ONSEMI,
	SPEC_TYPE_ALL_DEFECT_ONSEMI_MONO = SPEC_TYPE_ALL_DEFECT_ONSEMI,
	SPEC_TYPE_ALL_DEFECT_OMS,
	SPEC_TYPE_ALL_DEFECT_OV,
	SPEC_TYPE_ALL_DEFECT_SONY,

	/* Blemish */
	SPEC_TYPE_BLACKSPOT,
	SPEC_TYPE_LCB,
	SPEC_TYPE_YMEAN,
	SPEC_TYPE_FDF,
	SPEC_TYPE_BLEMSIH_FFT,

	/* Optical Center */
	SPEC_TYPE_OC_CETROID,
	SPEC_TYPE_OC_CETROID_BAYER = SPEC_TYPE_OC_CETROID,
	SPEC_TYPE_OC_CETROID_G = SPEC_TYPE_OC_CETROID,
	SPEC_TYPE_OC_CETROID_RGB = SPEC_TYPE_OC_CETROID,
	SPEC_TYPE_OC_CETROID_Y = SPEC_TYPE_OC_CETROID,
	SPEC_TYPE_OC_POLYFIT,
	SPEC_TYPE_OC_BRIGHTEST,

	/* Signal to Noise Ratio */
	SPEC_TYPE_SNR_NORM,
	SPEC_TYPE_SNR_VNE = SPEC_TYPE_SNR_NORM,
	SPEC_TYPE_SNR_PATTERN_NOISE,
	SPEC_TYPE_SNR_BW,
	SPEC_TYPE_DARK_CURRENT,
	SPEC_TYPE_DARK_NOISE,

	/* Resolution */
	SPEC_TYPE_SFR,
	SPEC_TYPE_EIAJ,
	SPEC_TYPE_FIDUCIAL_MARK,

	/* Shading */
	SPEC_TYPE_COLOR_SENSITIVITY,
	SPEC_TYPE_COLOR_SHADING,
	SPEC_TYPE_RELATIVE_ILLUMINATION,
	SPEC_TYPE_RELATIVE_ILLUMINATION_X,
	SPEC_TYPE_RELATIVE_UNIFORMITY,
	SPEC_TYPE_SHADING_UNIFORMITY,
	SPEC_TYPE_COLOR_UNIFORMITY,
	SPEC_TYPE_LENS_SHADING,

	/* Etc */
	SPEC_TYPE_COLOR_INTENSITY,
	SPEC_TYPE_COLOR_REPRODUCTION,
	SPEC_TYPE_IR_FILTER,
	SPEC_TYPE_FLARE,
	SPEC_TYPE_VIEW_MODE,
	SPEC_TYPE_SATURATION,
	SPEC_TYPE_STRAY_LIGHT,

	MAX_SPEC_TYPE_COUNT
};

enum ROI_TYPE
{
	/* Defect Pixel */
	/*ROI_TYPE_DEFECT_PIXEL,*/
	/*ROI_TYPE_HOT_DEFECT_PIXEL,*/
	/*ROI_TYPE_VERY_DEFECT_PIXEL,*/
	/*ROI_TYPE_LINE_NOISE,*/
	/*ROI_TYPE_COLUMN_FPN,*/
	/*ROI_TYPE_LOW_LIGHT_DARK_TEST,*/
	/*ROI_TYPE_ALL_DEFECT_ONSEMI,*/
	/*ROI_TYPE_ALL_DEFECT_ONSEMI_RCCB = ROI_TYPE_ALL_DEFECT_ONSEMI,*/
	/*ROI_TYPE_ALL_DEFECT_ONSEMI_MONO = ROI_TYPE_ALL_DEFECT_ONSEMI,*/
	/*ROI_TYPE_ALL_DEFECT_OMS,*/
	/*ROI_TYPE_ALL_DEFECT_OV,*/
	/*ROI_TYPE_ALL_DEFECT_SONY,*/

	/* Blemish */
	/*ROI_TYPE_BLACKSPOT,*/
	/*ROI_TYPE_LCB,*/
	/*ROI_TYPE_YMEAN,*/
	/*ROI_TYPE_FDF,*/
	/*ROI_TYPE_BLEMSIH_FFT,*/

	/* Optical Center */
	/*ROI_TYPE_OC_CETROID,*/
	/*ROI_TYPE_OC_CETROID_BAYER = ROI_OC_TYPE_CETROID,*/
	/*ROI_TYPE_OC_CETROID_G = ROI_OC_TYPE_CETROID,*/
	/*ROI_TYPE_OC_CETROID_RGB = ROI_OC_TYPE_CETROID,*/
	/*ROI_TYPE_OC_CETROID_Y = ROI_OC_TYPE_CETROID,*/
	/*ROI_TYPE_OC_POLYFIT,*/
	/*ROI_TYPE_OC_BRIGHTEST,*/

	/* Signal to Noise Ratio */
	ROI_TYPE_SNR_NORM,
	ROI_TYPE_SNR_VNE = ROI_TYPE_SNR_NORM,
	ROI_TYPE_SNR_PATTERN_NOISE,
	ROI_TYPE_SNR_BW,
	ROI_TYPE_DARK_CURRENT,
	ROI_TYPE_DARK_NOISE,

	/* Resolution */
	ROI_TYPE_SFR,
	ROI_TYPE_EIAJ,
	ROI_TYPE_FIDUCIAL_MARK,

	/* Shading */
	ROI_TYPE_COLOR_SENSITIVITY,
	ROI_TYPE_COLOR_SHADING,
	ROI_TYPE_RELATIVE_ILLUMINATION,
	/*ROI_TYPE_RELATIVE_ILLUMINATION_X,*/
	/*ROI_TYPE_RELATIVE_UNIFORMITY,*/
	ROI_TYPE_SHADING_UNIFORMITY,
	/*ROI_TYPE_COLOR_UNIFORMITY,*/
	/*ROI_TYPE_LENS_SHADING,*/

	/* Etc */
	ROI_TYPE_COLOR_INTENSITY,
	ROI_TYPE_COLOR_REPRODUCTION,
	ROI_TYPE_IR_FILTER,
	ROI_TYPE_FLARE,
	ROI_TYPE_VIEW_MODE,
	ROI_TYPE_SATURATION,
	ROI_TYPE_STRAY_LIGHT,

	MAX_ROI_TYPE_COUNT
};

enum RESULT_ROI_TYPE
{
	/* Defect Pixel, Blemish */
	/*RESULT_ROI_TYPE_DEFECT,*/
	/*RESULT_ROI_TYPE_BLOB,*/

	/* Optical Center */
	/*RESULT_ROI_TYPE_OC,*/

	/* Signal to Noise Ratio */
	/*RESULT_ROI_TYPE_SNR_NORM,*/
	/*RESULT_ROI_TYPE_SNR_VNE = RESULT_ROI_TYPE_SNR_NORM,*/
	/*RESULT_ROI_TYPE_PATTERN_NOISE,*/
	/*RESULT_ROI_TYPE_SNR_BW,*/
	/*RESULT_ROI_TYPE_DARK_CURRENT,*/
	RESULT_ROI_TYPE_DARK_NOISE,

	/* Resolution */
	/*RESULT_ROI_TYPE_SFR,*/
	/*RESULT_ROI_TYPE_EIAJ,*/
	/*RESULT_ROI_TYPE_FIDUCIAL_MARK,*/

	/* Shading */
	/*RESULT_ROI_TYPE_COLOR_SENSITIVITY,*/
	RESULT_ROI_TYPE_COLOR_SHADING,
	RESULT_ROI_TYPE_RELATIVE_ILLUMINATION,
	/*RESULT_ROI_TYPE_RELATIVE_ILLUMINATION_X,*/
	/*RESULT_ROI_TYPE_RELATIVE_UNIFORMITY,*/
	/*RESULT_ROI_TYPE_SHADING_UNIFORMITY,*/
	/*RESULT_ROI_TYPE_COLOR_UNIFORMITY,*/
	/*RESULT_ROI_TYPE_LENS_SHADING,*/

	/* Etc */
	/*RESULT_ROI_TYPE_COLOR_INTENSITY,*/
	/*RESULT_ROI_TYPE_COLOR_REPRODUCTION,*/
	/*RESULT_ROI_TYPE_IR_FILTER,*/
	RESULT_ROI_TYPE_FLARE,
	RESULT_ROI_TYPE_VIEW_MODE,
	/*RESULT_ROI_TYPE_SATURATION,*/
	RESULT_ROI_TYPE_STRAY_LIGHT,

	MAX_RESULT_ROI_TYPE_COUNT
};

enum RESULT_TYPE
{
	/* Defect Pixel, Blemish */
	RESULT_TYPE_DEFECT,
	RESULT_TYPE_BLOB,

	/* Optical Center */
	RESULT_TYPE_OC,

	/* Signal to Noise Ratio */
	RESULT_TYPE_SNR_NORM,
	RESULT_TYPE_SNR_VNE = RESULT_TYPE_SNR_NORM,
	RESULT_TYPE_PATTERN_NOISE,
	RESULT_TYPE_SNR_BW,
	RESULT_TYPE_DARK_CURRENT,
	RESULT_TYPE_DARK_NOISE,

	/* Resolution */
	RESULT_TYPE_SFR,
	RESULT_TYPE_EIAJ,
	RESULT_TYPE_FIDUCIAL_MARK,

	/* Shading */
	RESULT_TYPE_COLOR_SENSITIVITY,
	RESULT_TYPE_COLOR_SHADING,
	RESULT_TYPE_RELATIVE_ILLUMINATION,
	RESULT_TYPE_RELATIVE_ILLUMINATION_X,
	RESULT_TYPE_RELATIVE_UNIFORMITY,
	RESULT_TYPE_SHADING_UNIFORMITY,
	RESULT_TYPE_COLOR_UNIFORMITY,
	RESULT_TYPE_LENS_SHADING,

	/* Etc */
	RESULT_TYPE_COLOR_INTENSITY,
	RESULT_TYPE_COLOR_REPRODUCTION,
	RESULT_TYPE_IR_FILTER,
	RESULT_TYPE_FLARE,
	RESULT_TYPE_VIEW_MODE,
	RESULT_TYPE_SATURATION,
	RESULT_TYPE_STRAY_LIGHT,

	MAX_RESULT_TYPE_COUNT
};

#define MULTI_CIRCLE_FLAG_VERSION_MAJOR		1
#define MULTI_CIRCLE_FLAG_VERSION_MINOR		0
enum MULTI_CIRCLE_FLAG
{
	MULTI_CIRCLE_ENABLE,
	MULTI_CIRCLE_ZONE_SIZE_RATIO_A,
	MULTI_CIRCLE_ZONE_SIZE_RATIO_B,
	MULTI_CIRCLE_ZONE_SIZE_RATIO_C,
	MULTI_CIRCLE_THRESHOLD_A,
	MULTI_CIRCLE_THRESHOLD_B,
	MULTI_CIRCLE_THRESHOLD_C,

	MULTI_CIRCLE_FLAG_MAX_COUNT
};

enum EInspectionResultCode
{
	INSPECTION_RESULT_CODE_SUCCESS,
	INSPECTION_RESULT_CODE_NOT_CERTIFIED,
	INSPECTION_RESULT_CODE_IMAGE_GEN_FAIL,
	INSPECTION_RESULT_CODE_INVALID_BUFFER_INFO,
	INSPECTION_RESULT_CODE_INVALID_SPEC_PARAM,
	INSPECTION_RESULT_CODE_FAIL,
};